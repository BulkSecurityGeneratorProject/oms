# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        User - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'activated': 'bool',
            'email': 'str',
            'first_name': 'str',
            'id': 'int',
            'lang_key': 'str',
            'last_name': 'str',
            'login': 'str',
            'reset_date': 'datetime',
            'reset_key': 'str'
        }

        self.attribute_map = {
            'activated': 'activated',
            'email': 'email',
            'first_name': 'firstName',
            'id': 'id',
            'lang_key': 'langKey',
            'last_name': 'lastName',
            'login': 'login',
            'reset_date': 'resetDate',
            'reset_key': 'resetKey'
        }

        self._activated = None
        self._email = None
        self._first_name = None
        self._id = None
        self._lang_key = None
        self._last_name = None
        self._login = None
        self._reset_date = None
        self._reset_key = None

    @property
    def activated(self):
        """
        Gets the activated of this User.


        :return: The activated of this User.
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """
        Sets the activated of this User.


        :param activated: The activated of this User.
        :type: bool
        """
        self._activated = activated

    @property
    def email(self):
        """
        Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this User.


        :param email: The email of this User.
        :type: str
        """
        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type: str
        """
        self._first_name = first_name

    @property
    def id(self):
        """
        Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this User.


        :param id: The id of this User.
        :type: int
        """
        self._id = id

    @property
    def lang_key(self):
        """
        Gets the lang_key of this User.


        :return: The lang_key of this User.
        :rtype: str
        """
        return self._lang_key

    @lang_key.setter
    def lang_key(self, lang_key):
        """
        Sets the lang_key of this User.


        :param lang_key: The lang_key of this User.
        :type: str
        """
        self._lang_key = lang_key

    @property
    def last_name(self):
        """
        Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type: str
        """
        self._last_name = last_name

    @property
    def login(self):
        """
        Gets the login of this User.


        :return: The login of this User.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """
        Sets the login of this User.


        :param login: The login of this User.
        :type: str
        """
        self._login = login

    @property
    def reset_date(self):
        """
        Gets the reset_date of this User.


        :return: The reset_date of this User.
        :rtype: datetime
        """
        return self._reset_date

    @reset_date.setter
    def reset_date(self, reset_date):
        """
        Sets the reset_date of this User.


        :param reset_date: The reset_date of this User.
        :type: datetime
        """
        self._reset_date = reset_date

    @property
    def reset_key(self):
        """
        Gets the reset_key of this User.


        :return: The reset_key of this User.
        :rtype: str
        """
        return self._reset_key

    @reset_key.setter
    def reset_key(self, reset_key):
        """
        Sets the reset_key of this User.


        :param reset_key: The reset_key of this User.
        :type: str
        """
        self._reset_key = reset_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

