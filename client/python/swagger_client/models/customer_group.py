# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CustomerGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CustomerGroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'str',
            'customerss': 'list[Customer]',
            'formulae': 'Formulae',
            'freight': 'float',
            'id': 'int',
            'mill': 'Mill',
            'name': 'str',
            'notes': 'NoteSet',
            'price_list': 'PriceList'
        }

        self.attribute_map = {
            'code': 'code',
            'customerss': 'customerss',
            'formulae': 'formulae',
            'freight': 'freight',
            'id': 'id',
            'mill': 'mill',
            'name': 'name',
            'notes': 'notes',
            'price_list': 'priceList'
        }

        self._code = None
        self._customerss = None
        self._formulae = None
        self._freight = None
        self._id = None
        self._mill = None
        self._name = None
        self._notes = None
        self._price_list = None

    @property
    def code(self):
        """
        Gets the code of this CustomerGroup.


        :return: The code of this CustomerGroup.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this CustomerGroup.


        :param code: The code of this CustomerGroup.
        :type: str
        """
        self._code = code

    @property
    def customerss(self):
        """
        Gets the customerss of this CustomerGroup.


        :return: The customerss of this CustomerGroup.
        :rtype: list[Customer]
        """
        return self._customerss

    @customerss.setter
    def customerss(self, customerss):
        """
        Sets the customerss of this CustomerGroup.


        :param customerss: The customerss of this CustomerGroup.
        :type: list[Customer]
        """
        self._customerss = customerss

    @property
    def formulae(self):
        """
        Gets the formulae of this CustomerGroup.


        :return: The formulae of this CustomerGroup.
        :rtype: Formulae
        """
        return self._formulae

    @formulae.setter
    def formulae(self, formulae):
        """
        Sets the formulae of this CustomerGroup.


        :param formulae: The formulae of this CustomerGroup.
        :type: Formulae
        """
        self._formulae = formulae

    @property
    def freight(self):
        """
        Gets the freight of this CustomerGroup.


        :return: The freight of this CustomerGroup.
        :rtype: float
        """
        return self._freight

    @freight.setter
    def freight(self, freight):
        """
        Sets the freight of this CustomerGroup.


        :param freight: The freight of this CustomerGroup.
        :type: float
        """
        self._freight = freight

    @property
    def id(self):
        """
        Gets the id of this CustomerGroup.


        :return: The id of this CustomerGroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CustomerGroup.


        :param id: The id of this CustomerGroup.
        :type: int
        """
        self._id = id

    @property
    def mill(self):
        """
        Gets the mill of this CustomerGroup.


        :return: The mill of this CustomerGroup.
        :rtype: Mill
        """
        return self._mill

    @mill.setter
    def mill(self, mill):
        """
        Sets the mill of this CustomerGroup.


        :param mill: The mill of this CustomerGroup.
        :type: Mill
        """
        self._mill = mill

    @property
    def name(self):
        """
        Gets the name of this CustomerGroup.


        :return: The name of this CustomerGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CustomerGroup.


        :param name: The name of this CustomerGroup.
        :type: str
        """
        self._name = name

    @property
    def notes(self):
        """
        Gets the notes of this CustomerGroup.


        :return: The notes of this CustomerGroup.
        :rtype: NoteSet
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this CustomerGroup.


        :param notes: The notes of this CustomerGroup.
        :type: NoteSet
        """
        self._notes = notes

    @property
    def price_list(self):
        """
        Gets the price_list of this CustomerGroup.


        :return: The price_list of this CustomerGroup.
        :rtype: PriceList
        """
        return self._price_list

    @price_list.setter
    def price_list(self, price_list):
        """
        Sets the price_list of this CustomerGroup.


        :param price_list: The price_list of this CustomerGroup.
        :type: PriceList
        """
        self._price_list = price_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

