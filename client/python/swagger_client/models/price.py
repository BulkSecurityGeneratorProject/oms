# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Price(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Price - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'mill': 'Mill',
            'price_list': 'PriceList',
            'quality': 'Quality',
            'simple_gsm_shade': 'SimpleGsmShade',
            'value': 'float'
        }

        self.attribute_map = {
            'id': 'id',
            'mill': 'mill',
            'price_list': 'priceList',
            'quality': 'quality',
            'simple_gsm_shade': 'simpleGsmShade',
            'value': 'value'
        }

        self._id = None
        self._mill = None
        self._price_list = None
        self._quality = None
        self._simple_gsm_shade = None
        self._value = None

    @property
    def id(self):
        """
        Gets the id of this Price.


        :return: The id of this Price.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Price.


        :param id: The id of this Price.
        :type: int
        """
        self._id = id

    @property
    def mill(self):
        """
        Gets the mill of this Price.


        :return: The mill of this Price.
        :rtype: Mill
        """
        return self._mill

    @mill.setter
    def mill(self, mill):
        """
        Sets the mill of this Price.


        :param mill: The mill of this Price.
        :type: Mill
        """
        self._mill = mill

    @property
    def price_list(self):
        """
        Gets the price_list of this Price.


        :return: The price_list of this Price.
        :rtype: PriceList
        """
        return self._price_list

    @price_list.setter
    def price_list(self, price_list):
        """
        Sets the price_list of this Price.


        :param price_list: The price_list of this Price.
        :type: PriceList
        """
        self._price_list = price_list

    @property
    def quality(self):
        """
        Gets the quality of this Price.


        :return: The quality of this Price.
        :rtype: Quality
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """
        Sets the quality of this Price.


        :param quality: The quality of this Price.
        :type: Quality
        """
        self._quality = quality

    @property
    def simple_gsm_shade(self):
        """
        Gets the simple_gsm_shade of this Price.


        :return: The simple_gsm_shade of this Price.
        :rtype: SimpleGsmShade
        """
        return self._simple_gsm_shade

    @simple_gsm_shade.setter
    def simple_gsm_shade(self, simple_gsm_shade):
        """
        Sets the simple_gsm_shade of this Price.


        :param simple_gsm_shade: The simple_gsm_shade of this Price.
        :type: SimpleGsmShade
        """
        self._simple_gsm_shade = simple_gsm_shade

    @property
    def value(self):
        """
        Gets the value of this Price.


        :return: The value of this Price.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this Price.


        :param value: The value of this Price.
        :type: float
        """
        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

