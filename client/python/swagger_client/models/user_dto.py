# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class UserDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UserDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'activated': 'bool',
            'authorities': 'list[str]',
            'email': 'str',
            'first_name': 'str',
            'lang_key': 'str',
            'last_name': 'str',
            'login': 'str',
            'password': 'str'
        }

        self.attribute_map = {
            'activated': 'activated',
            'authorities': 'authorities',
            'email': 'email',
            'first_name': 'firstName',
            'lang_key': 'langKey',
            'last_name': 'lastName',
            'login': 'login',
            'password': 'password'
        }

        self._activated = None
        self._authorities = None
        self._email = None
        self._first_name = None
        self._lang_key = None
        self._last_name = None
        self._login = None
        self._password = None

    @property
    def activated(self):
        """
        Gets the activated of this UserDTO.


        :return: The activated of this UserDTO.
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """
        Sets the activated of this UserDTO.


        :param activated: The activated of this UserDTO.
        :type: bool
        """
        self._activated = activated

    @property
    def authorities(self):
        """
        Gets the authorities of this UserDTO.


        :return: The authorities of this UserDTO.
        :rtype: list[str]
        """
        return self._authorities

    @authorities.setter
    def authorities(self, authorities):
        """
        Sets the authorities of this UserDTO.


        :param authorities: The authorities of this UserDTO.
        :type: list[str]
        """
        self._authorities = authorities

    @property
    def email(self):
        """
        Gets the email of this UserDTO.


        :return: The email of this UserDTO.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserDTO.


        :param email: The email of this UserDTO.
        :type: str
        """
        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this UserDTO.


        :return: The first_name of this UserDTO.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UserDTO.


        :param first_name: The first_name of this UserDTO.
        :type: str
        """
        self._first_name = first_name

    @property
    def lang_key(self):
        """
        Gets the lang_key of this UserDTO.


        :return: The lang_key of this UserDTO.
        :rtype: str
        """
        return self._lang_key

    @lang_key.setter
    def lang_key(self, lang_key):
        """
        Sets the lang_key of this UserDTO.


        :param lang_key: The lang_key of this UserDTO.
        :type: str
        """
        self._lang_key = lang_key

    @property
    def last_name(self):
        """
        Gets the last_name of this UserDTO.


        :return: The last_name of this UserDTO.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UserDTO.


        :param last_name: The last_name of this UserDTO.
        :type: str
        """
        self._last_name = last_name

    @property
    def login(self):
        """
        Gets the login of this UserDTO.


        :return: The login of this UserDTO.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """
        Sets the login of this UserDTO.


        :param login: The login of this UserDTO.
        :type: str
        """
        self._login = login

    @property
    def password(self):
        """
        Gets the password of this UserDTO.


        :return: The password of this UserDTO.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this UserDTO.


        :param password: The password of this UserDTO.
        :type: str
        """
        self._password = password

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

