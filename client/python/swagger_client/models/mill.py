# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Mill(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Mill - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'addresses': 'Addresses',
            'code': 'str',
            'id': 'int',
            'name': 'str',
            'notes': 'NoteSet',
            'qualitiess': 'list[Quality]'
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'code': 'code',
            'id': 'id',
            'name': 'name',
            'notes': 'notes',
            'qualitiess': 'qualitiess'
        }

        self._addresses = None
        self._code = None
        self._id = None
        self._name = None
        self._notes = None
        self._qualitiess = None

    @property
    def addresses(self):
        """
        Gets the addresses of this Mill.


        :return: The addresses of this Mill.
        :rtype: Addresses
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """
        Sets the addresses of this Mill.


        :param addresses: The addresses of this Mill.
        :type: Addresses
        """
        self._addresses = addresses

    @property
    def code(self):
        """
        Gets the code of this Mill.


        :return: The code of this Mill.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Mill.


        :param code: The code of this Mill.
        :type: str
        """
        self._code = code

    @property
    def id(self):
        """
        Gets the id of this Mill.


        :return: The id of this Mill.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Mill.


        :param id: The id of this Mill.
        :type: int
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Mill.


        :return: The name of this Mill.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Mill.


        :param name: The name of this Mill.
        :type: str
        """
        self._name = name

    @property
    def notes(self):
        """
        Gets the notes of this Mill.


        :return: The notes of this Mill.
        :rtype: NoteSet
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this Mill.


        :param notes: The notes of this Mill.
        :type: NoteSet
        """
        self._notes = notes

    @property
    def qualitiess(self):
        """
        Gets the qualitiess of this Mill.


        :return: The qualitiess of this Mill.
        :rtype: list[Quality]
        """
        return self._qualitiess

    @qualitiess.setter
    def qualitiess(self, qualitiess):
        """
        Sets the qualitiess of this Mill.


        :param qualitiess: The qualitiess of this Mill.
        :type: list[Quality]
        """
        self._qualitiess = qualitiess

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

