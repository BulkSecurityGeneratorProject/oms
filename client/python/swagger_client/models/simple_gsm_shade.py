# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SimpleGsmShade(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SimpleGsmShade - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'max_gsm': 'int',
            'mill': 'Mill',
            'min_gsm': 'int',
            'shade': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'max_gsm': 'maxGsm',
            'mill': 'mill',
            'min_gsm': 'minGsm',
            'shade': 'shade'
        }

        self._id = None
        self._max_gsm = None
        self._mill = None
        self._min_gsm = None
        self._shade = None

    @property
    def id(self):
        """
        Gets the id of this SimpleGsmShade.


        :return: The id of this SimpleGsmShade.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SimpleGsmShade.


        :param id: The id of this SimpleGsmShade.
        :type: int
        """
        self._id = id

    @property
    def max_gsm(self):
        """
        Gets the max_gsm of this SimpleGsmShade.


        :return: The max_gsm of this SimpleGsmShade.
        :rtype: int
        """
        return self._max_gsm

    @max_gsm.setter
    def max_gsm(self, max_gsm):
        """
        Sets the max_gsm of this SimpleGsmShade.


        :param max_gsm: The max_gsm of this SimpleGsmShade.
        :type: int
        """
        self._max_gsm = max_gsm

    @property
    def mill(self):
        """
        Gets the mill of this SimpleGsmShade.


        :return: The mill of this SimpleGsmShade.
        :rtype: Mill
        """
        return self._mill

    @mill.setter
    def mill(self, mill):
        """
        Sets the mill of this SimpleGsmShade.


        :param mill: The mill of this SimpleGsmShade.
        :type: Mill
        """
        self._mill = mill

    @property
    def min_gsm(self):
        """
        Gets the min_gsm of this SimpleGsmShade.


        :return: The min_gsm of this SimpleGsmShade.
        :rtype: int
        """
        return self._min_gsm

    @min_gsm.setter
    def min_gsm(self, min_gsm):
        """
        Sets the min_gsm of this SimpleGsmShade.


        :param min_gsm: The min_gsm of this SimpleGsmShade.
        :type: int
        """
        self._min_gsm = min_gsm

    @property
    def shade(self):
        """
        Gets the shade of this SimpleGsmShade.


        :return: The shade of this SimpleGsmShade.
        :rtype: str
        """
        return self._shade

    @shade.setter
    def shade(self, shade):
        """
        Sets the shade of this SimpleGsmShade.


        :param shade: The shade of this SimpleGsmShade.
        :type: str
        """
        self._shade = shade

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

